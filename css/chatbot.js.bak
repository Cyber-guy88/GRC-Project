// Enhanced Chatbot Configuration
const chatbotConfig = {
    categories: [
        {
            id: 'grc-fundamentals',
            icon: 'fas fa-book',
            title: 'GRC Fundamentals',
            description: 'Learn about core GRC concepts and principles',
            questions: [
                'What is GRC?',
                'Why GRC is important?',
                'How do governance, risk, and compliance work together?',
                'What are the benefits of implementing GRC?',
                'How to build an effective GRC strategy?'
            ]
        },
        {
            id: 'risk-management',
            icon: 'fas fa-shield-alt',
            title: 'Risk Management',
            description: 'Explore risk assessment and mitigation strategies',
            questions: [
                'What is risk management?',
                'Risk management tools?',
                'What are different types of business risks?',
                'How to implement risk controls?',
                'What is the NIST risk management framework?'
            ]
        },
        {
            id: 'compliance-frameworks',
            icon: 'fas fa-check-circle',
            title: 'Compliance Frameworks',
            description: 'Understand key compliance standards and requirements',
            questions: [
                'What is SOC 2 compliance?',
                'How to achieve HIPAA compliance?',
                'What are PCI-DSS requirements?',
                'How to get ISO 27001 certified?',
                'What is GDPR compliance?'
            ]
        },
        {
            id: 'it-governance',
            icon: 'fas fa-cogs',
            title: 'IT Governance',
            description: 'Learn about IT governance frameworks and implementation',
            questions: [
                'What is ISO 38500 for IT governance?',
                'How to implement COBIT framework?',
                'What is ITIL framework?',
                'Best practices for IT governance?',
                'How to measure IT governance effectiveness?'
            ]
        },
        {
            id: 'security-standards',
            icon: 'fas fa-lock',
            title: 'Security Standards',
            description: 'Explore cybersecurity frameworks and standards',
            questions: [
                'What is the NIST Cybersecurity Framework?',
                'How to implement FedRAMP?',
                'What is CMMC certification?',
                'Understanding NIST 800-53 controls',
                'What is CMMI framework?'
            ]
        },
        {
            id: 'financial-compliance',
            icon: 'fas fa-university',
            title: 'Financial Compliance',
            description: 'Learn about financial regulations and frameworks',
            questions: [
                'What is RBI IT governance framework?',
                'Understanding Basel framework',
                'How to implement COSO framework?',
                'Financial risk management best practices',
                'Regulatory reporting requirements'
            ]
        }
    ],
    responses: {
        'What is GRC?': {
            text: 'GRC stands for Governance, Risk, and Compliance. It is an integrated approach to organizational governance that ensures ethical and effective operations, manages risks appropriately, and complies with relevant laws and regulations.',
            links: [
                { text: 'Learn More About GRC', url: 'home.html#learn-grc' },
                { text: 'GRC Implementation', url: 'frame.html' }
            ]
        },
        'Why GRC is important?': {
            text: 'GRC is important because it helps organizations:\n\n1. Reduce operational risks and prevent costly incidents\n2. Ensure regulatory compliance and avoid penalties\n3. Improve decision-making through better visibility\n4. Enhance operational efficiency by eliminating redundant processes\n5. Build trust with stakeholders through transparency and accountability',
            links: [
                { text: 'GRC Benefits', url: 'governance.html' }
            ]
        },
        'What is risk management?': {
            text: 'Risk management is the process of identifying, assessing, and controlling threats to an organization\'s capital and earnings. These threats or risks could stem from various sources including financial uncertainties, legal liabilities, strategic management errors, accidents, and natural disasters.',
            links: [
                { text: 'Risk Management Guide', url: 'rsk.html' },
                { text: 'Risk Assessment', url: 'rsk.html#assessment' }
            ]
        },
        'Risk management tools?': {
            text: 'Risk management tools help organizations identify, assess, and mitigate potential risks. Common tools include:\n\n1. Risk registers and risk matrices\n2. Risk assessment templates\n3. Risk scoring systems\n4. Risk mitigation planning tools\n5. Risk monitoring dashboards\n6. Compliance management software',
            links: [
                { text: 'Risk Management Tools', url: 'rsk2.html' },
                { text: 'Risk Frameworks', url: 'frame.html#risk' }
            ]
        },
        'What are the core components of GRC?': {
            text: 'The core components of GRC are:\n\n1. Governance: Leadership, oversight, strategic direction, and policy frameworks\n2. Risk Management: Risk identification, assessment, mitigation, and monitoring\n3. Compliance: Regulatory compliance, internal policies, and auditing\n\nLearn more about each component:',
            links: [
                { text: 'GRC Components Guide', url: 'grc.html' },
                { text: 'Implementation Guide', url: 'frame.html' }
            ]
        },
        'What is ISO 31000 risk management framework?': {
            text: 'ISO 31000 is an international standard for risk management that provides:\n\n1. Principles for effective risk management\n2. Framework for integrating risk management\n3. Process for managing risks (identification, analysis, evaluation, treatment)\n\nExplore more about risk management:',
            links: [
                { text: 'Risk Management Guide', url: 'rsk.html' },
                { text: 'ISO 31000 Details', url: 'is031000.html' }
            ]
        },
        'How to implement NIST CSF?': {
            text: 'Implementing NIST CSF involves:\n\n1. Identify critical assets and risks\n2. Develop protection mechanisms\n3. Deploy detection capabilities\n4. Create response procedures\n5. Plan recovery strategies\n\nThis framework helps organizations improve their cybersecurity posture systematically.',
            links: [
                { text: 'NIST CSF Guide', url: '/frameworks/nist-csf' },
                { text: 'Implementation Steps', url: '/guides/nist-implementation' }
            ]
        },
        'What is GDPR compliance?': {
            text: 'GDPR (General Data Protection Regulation) is a comprehensive data protection law that:\n\n1. Protects EU citizens\' data privacy\n2. Requires explicit consent for data collection\n3. Mandates breach notification\n4. Enforces data protection measures\n\nNon-compliance can result in significant fines.',
            links: [
                { text: 'GDPR Overview', url: '/frameworks/gdpr' },
                { text: 'Compliance Guide', url: '/guides/gdpr-compliance' }
            ]
        }
    },
    defaultResponses: [
        {
            text: "I understand you're asking about {topic}. Here are some helpful resources:",
            links: [
                { text: 'GRC Guide', url: 'grc.html' },
                { text: 'Framework Overview', url: 'frame.html' }
            ]
        },
        {
            text: "Let me help you with {topic}. Check out these relevant pages:",
            links: [
                { text: 'Knowledge Base', url: 'blog.html' },
                { text: 'Best Practices', url: 'governance.html' }
            ]
        }
    ],
    greetings: [
        "Hello! I am your GRC Assistant. How can I help you today?",
        "Welcome to GRC Portal! I am here to help with your questions.",
        "Hi there! I can assist you with Governance, Risk, and Compliance topics."
    ],
    suggestions: [
        "Learn about GRC fundamentals",
        "Explore compliance frameworks",
        "Understand risk management",
        "Discover IT governance",
        "Check security standards"
    ]
};

// Enhanced State Management
const chatState = {
    currentCategory: null,
    messageHistory: [],
    isMinimized: false,
    isListening: false,
    typingTimeout: null,
    welcomeShown: false,
    isOpen: false
};

// Initialize Chatbot
function initChatbot() {
    try {
        console.log("Initializing chatbot...");
        const chatbotButton = document.getElementById('chatbotButton');
        const chatbotWindow = document.getElementById('chatbotWindow');
        
        if (!chatbotButton) {
            console.error("Chatbot button element not found!");
            return;
        }
        
        if (!chatbotWindow) {
            console.error("Chatbot window element not found!");
            return;
        }
        
        console.log("Chatbot elements found, setting up event listeners...");
        
        chatbotButton.addEventListener('click', () => {
            console.log("Chatbot button clicked, current state:", chatState.isOpen);
            chatState.isOpen = !chatState.isOpen;
            if (chatState.isOpen) {
                chatbotWindow.style.display = 'flex';
                chatbotWindow.classList.add('active');
                
                if (!chatState.welcomeShown) {
                    const messagesContainer = document.getElementById('chatbotMessages');
                    if (!messagesContainer) {
                        console.error("Messages container not found!");
                        return;
                    }
                    messagesContainer.innerHTML = ''; // Clear previous content
                    showCategories();
                    chatState.welcomeShown = true;
                }
            } else {
                chatbotWindow.classList.remove('active');
                setTimeout(() => {
                    chatbotWindow.style.display = 'none';
                }, 300);
            }
        });
        
        // Setup other event listeners
        setupEventListeners();
        console.log("Chatbot initialization complete.");
    } catch (error) {
        console.error("Error initializing chatbot:", error);
    }
}

// Enhanced Message Addition
function addMessage(type, content) {
    const messagesContainer = document.getElementById('chatbotMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `chatbot-message ${type}`;
    
    if (typeof content === 'string') {
        messageDiv.textContent = content;
    } else {
        messageDiv.innerHTML = content;
    }
    
    messagesContainer.appendChild(messageDiv);
    scrollToBottom();
}

// Enhanced Message Appending
function appendMessage(text, type) {
    const messagesContainer = document.getElementById('chatbotMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `chatbot-message ${type}`;
    
    // Process markdown-like syntax
    const processedText = processMessageText(text);
    messageDiv.innerHTML = processedText;
    
    // Add to container
    messagesContainer.appendChild(messageDiv);
    scrollToBottom();
    
    // Store in history
    chatState.messageHistory.push({ text, type });
}

// Process Message Text
function processMessageText(text) {
    // Convert URLs to links
    text = text.replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank">$1</a>');
    
    // Convert markdown-like syntax
    text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
    
    // Convert newlines to <br>
    text = text.replace(/\n/g, '<br>');
    
    return text;
}

// Handle User Message
function handleUserMessage() {
    try {
        console.log("Handling user message...");
        const input = document.getElementById('userInput');
        
        if (!input) {
            console.error("User input element not found!");
            return;
        }
        
        const text = input.value.trim();
        console.log("User input text:", text);
        
        if (text) {
            input.value = '';
            
            const messagesContainer = document.getElementById('chatbotMessages');
            if (!messagesContainer) {
                console.error("Messages container not found!");
                return;
            }
            
            // Add user message
            const userMessage = document.createElement('div');
            userMessage.className = 'chatbot-message user';
            userMessage.textContent = text;
            messagesContainer.appendChild(userMessage);
            
            // Find and display response
            console.log("Finding response for:", text);
            const response = findResponse(text);
            if (response) {
                console.log("Response found:", response);
                setTimeout(() => {
                    const botMessage = document.createElement('div');
                    botMessage.className = 'chatbot-message bot';
                    botMessage.innerHTML = `
                        <div class="response-content">
                            <p>${response.text}</p>
                            ${response.links ? `
                                <div class="message-links">
                                    ${response.links.map(link => `
                                        <a href="${link.url}" class="message-link" target="_blank">
                                            <i class="fas fa-external-link-alt"></i>
                                            ${link.text}
                                        </a>
                                    `).join('')}
                                </div>
                            ` : ''}
                        </div>
                    `;
                    messagesContainer.appendChild(botMessage);
                    scrollToBottom();
                }, 500);
            } else {
                console.log("No direct response found, showing categories");
                // Show categories if no direct response found
                setTimeout(() => {
                    showCategories();
                }, 500);
            }
        }
    } catch (error) {
        console.error("Error handling user message:", error);
    }
}

// Find Response
function findResponse(text) {
    // Direct match
    if (chatbotConfig.responses[text]) {
        return chatbotConfig.responses[text];
    }
    
    // Fuzzy match
    const lowerText = text.toLowerCase();
    for (const [question, response] of Object.entries(chatbotConfig.responses)) {
        if (question.toLowerCase().includes(lowerText) || 
            lowerText.includes(question.toLowerCase())) {
            return response;
        }
    }
    
    return null;
}

// Scroll to bottom of messages
function scrollToBottom() {
    const messagesContainer = document.getElementById('chatbotMessages');
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// Enhanced Voice Input
function handleVoiceInput() {
    if (!chatState.isListening) {
        const recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        
        recognition.onstart = () => {
            chatState.isListening = true;
            updateVoiceButton(true);
        };
        
        recognition.onresult = (event) => {
            const text = event.results[0][0].transcript;
            document.getElementById('userInput').value = text;
            handleUserMessage();
        };
        
        recognition.onend = () => {
            chatState.isListening = false;
            updateVoiceButton(false);
        };
        
        recognition.start();
    } else {
        // Stop listening
        recognition.stop();
    }
}

// Handle File Upload
function handleFileUpload(event) {
    const file = event.target.files[0];
    if (file) {
        addMessage('user', `Uploading file: ${file.name}...`);
        
        // Simulate file upload
        setTimeout(() => {
            addMessage('bot', `File "${file.name}" has been uploaded successfully!`, true);
        }, 1500);
    }
}

// Toggle Minimize
function toggleMinimize() {
    const chatbot = document.getElementById('chatbotWindow');
    chatState.isMinimized = !chatState.isMinimized;
    
    if (chatState.isMinimized) {
        chatbot.classList.add('minimized');
    } else {
        chatbot.classList.remove('minimized');
    }
}

// Utility Functions
function updateVoiceButton(isListening) {
    const voiceButton = document.getElementById('voiceInput');
    voiceButton.classList.toggle('listening', isListening);
}

function showWelcomeAnimation() {
    const welcomeDiv = document.createElement('div');
    welcomeDiv.className = 'welcome-animation';
    welcomeDiv.innerHTML = `
        <div class="welcome-icon">
            <i class="fas fa-robot"></i>
        </div>
    `;
    
    document.getElementById('chatbotMessages').appendChild(welcomeDiv);
    
    // Remove after animation
    setTimeout(() => {
        welcomeDiv.remove();
    }, 3000);
}

// Setup Event Listeners
function setupEventListeners() {
    try {
        console.log("Setting up chatbot event listeners...");
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendMessage');
        const minimizeButton = document.querySelector('.minimize-chatbot');
        const closeButton = document.querySelector('.close-chatbot');
        
        if (!userInput) {
            console.error("User input field not found!");
        }
        
        if (!sendButton) {
            console.error("Send button not found!");
        }
        
        if (userInput && sendButton) {
            console.log("Setting up input and send button event listeners");
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    console.log("Enter key pressed in input");
                    handleUserMessage();
                }
            });
            
            sendButton.addEventListener('click', () => {
                console.log("Send button clicked");
                handleUserMessage();
            });
        }
        
        if (!minimizeButton) {
            console.error("Minimize button not found!");
        } else {
            console.log("Setting up minimize button event listener");
            minimizeButton.addEventListener('click', () => {
                console.log("Minimize button clicked");
                const chatbotWindow = document.getElementById('chatbotWindow');
                chatbotWindow.classList.toggle('minimized');
            });
        }
        
        if (!closeButton) {
            console.error("Close button not found!");
        } else {
            console.log("Setting up close button event listener");
            closeButton.addEventListener('click', () => {
                console.log("Close button clicked");
                const chatbotWindow = document.getElementById('chatbotWindow');
                chatbotWindow.classList.remove('active');
                setTimeout(() => {
                    chatbotWindow.style.display = 'none';
                }, 300);
                chatState.isOpen = false;
            });
        }
        
        console.log("Event listeners setup complete");
    } catch (error) {
        console.error("Error setting up event listeners:", error);
    }
}

// Show Categories
function showCategories() {
    try {
        console.log("Showing categories...");
        const messagesContainer = document.getElementById('chatbotMessages');
        
        if (!messagesContainer) {
            console.error("Messages container not found in showCategories!");
            return;
        }
        
        const categoriesHtml = document.createElement('div');
        categoriesHtml.className = 'categories-container';
        
        console.log("Creating categories HTML with", chatbotConfig.categories.length, "categories");
        
        categoriesHtml.innerHTML = `
            <div class="welcome-message">
                <div class="welcome-icon">
                    <i class="fas fa-robot"></i>
                </div>
                <h2>How can I help you today?</h2>
                <p>Select a category to explore:</p>
            </div>
            <div class="categories-grid">
                ${chatbotConfig.categories.map(category => `
                    <div class="category-card" onclick="showCategoryQuestions('${category.id}')">
                        <div class="category-icon">
                            <i class="${category.icon}"></i>
                        </div>
                        <div class="category-content">
                            <h3>${category.title}</h3>
                            <p>${category.description}</p>
                        </div>
                        <div class="category-arrow">
                            <i class="fas fa-chevron-right"></i>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
        
        messagesContainer.appendChild(categoriesHtml);
        scrollToBottom();
        console.log("Categories displayed successfully");
    } catch (error) {
        console.error("Error showing categories:", error);
    }
}

// Show Category Questions
function showCategoryQuestions(categoryId) {
    const category = chatbotConfig.categories.find(c => c.id === categoryId);
    if (!category) return;

    const messagesContainer = document.getElementById('chatbotMessages');
    const questionsContainer = document.createElement('div');
    questionsContainer.className = 'questions-container';
    
    questionsContainer.innerHTML = `
        <div class="questions-header">
            <button class="back-button" onclick="showCategories()">
                <i class="fas fa-arrow-left"></i>
                Back to Categories
            </button>
            <h3><i class="${category.icon}"></i> ${category.title}</h3>
        </div>
        <div class="questions-grid">
            ${category.questions.map(question => `
                <div class="question-card" onclick="handleQuestionClick('${question.replace(/'/g, "\\'")}')">
                    <i class="fas fa-question-circle"></i>
                    <span>${question}</span>
                </div>
            `).join('')}
        </div>
    `;
    
    // Clear previous content and add new questions
    messagesContainer.innerHTML = '';
    messagesContainer.appendChild(questionsContainer);
}

// Handle Question Click
function handleQuestionClick(question) {
    const messagesContainer = document.getElementById('chatbotMessages');
    
    // Add user question
    const userMessage = document.createElement('div');
    userMessage.className = 'chatbot-message user';
    userMessage.textContent = question;
    messagesContainer.appendChild(userMessage);
    
    // Get and display response
    const response = chatbotConfig.responses[question];
    if (response) {
        const botMessage = document.createElement('div');
        botMessage.className = 'chatbot-message bot';
        
        botMessage.innerHTML = `
            <div class="response-content">
                <p>${response.text}</p>
                ${response.links ? `
                    <div class="message-links">
                        ${response.links.map(link => `
                            <a href="${link.url}" class="message-link" target="_blank">
                                <i class="fas fa-external-link-alt"></i>
                                ${link.text}
                            </a>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `;
        
        setTimeout(() => {
            messagesContainer.appendChild(botMessage);
            scrollToBottom();
        }, 500);
    }
}

// Add Links to Message
function addLinks(links) {
    const linksContainer = document.createElement('div');
    linksContainer.className = 'message-links';
    
    links.forEach(link => {
        const linkElement = document.createElement('a');
        linkElement.href = link.url;
        linkElement.className = 'chat-link';
        linkElement.target = '_blank';
        linkElement.innerHTML = `
            <i class="fas fa-external-link-alt"></i>
            <span>${link.text}</span>
        `;
        linksContainer.appendChild(linkElement);
    });
    
    const lastMessage = document.querySelector('.chatbot-message:last-child');
    if (lastMessage) {
        lastMessage.appendChild(linksContainer);
    }
}

// Find Similar Response using fuzzy matching
function findSimilarResponse(question) {
    const threshold = 0.6; // Similarity threshold
    let bestMatch = null;
    let bestScore = 0;
    
    Object.entries(chatbotConfig.responses).forEach(([key, value]) => {
        const similarity = calculateSimilarity(question.toLowerCase(), key.toLowerCase());
        if (similarity > threshold && similarity > bestScore) {
            bestMatch = value;
            bestScore = similarity;
        }
    });
    
    return bestMatch;
}

// Calculate text similarity (Levenshtein distance based)
function calculateSimilarity(str1, str2) {
    const longer = str1.length > str2.length ? str1 : str2;
    const shorter = str1.length > str2.length ? str2 : str1;
    
    if (longer.length === 0) {
        return 1.0;
    }
    
    const costs = [];
    for (let i = 0; i <= shorter.length; i++) {
        let lastValue = i;
        for (let j = 0; j <= longer.length; j++) {
            if (i === 0) {
                costs[j] = j;
            } else if (j > 0) {
                let newValue = costs[j - 1];
                if (shorter[i - 1] !== longer[j - 1]) {
                    newValue = Math.min(Math.min(newValue, lastValue), costs[j]) + 1;
                }
                costs[j - 1] = lastValue;
                lastValue = newValue;
            }
        }
        if (i > 0) {
            costs[longer.length] = lastValue;
        }
    }
    
    return (longer.length - costs[longer.length]) / longer.length;
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM loaded. Initializing chatbot...");
    initChatbot();
}); 